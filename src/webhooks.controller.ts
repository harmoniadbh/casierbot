import { 
  Controller,      //Permet de transformer une classe en contr√¥leur qui peut g√©rer des routes HTTP
  Get,            // Permet de cr√©er une route GET (lecture ou v√©rification)
  Post,           // Permet de cr√©er une route POST (souvent pour envoyer ou recevoir des donn√©es)
  Query,          // Pour r√©cup√©rer les param√®tres d'URL (?param=value)
  Body,           // Pour r√©cup√©rer le corps de la requ√™te (donn√©es JSON)
  HttpCode,       // Permet de sp√©cifier le code HTTP de la r√©ponse (200, 201, 403‚Ä¶)
  HttpStatus,     // Constantes des codes HTTP (200, 403, etc.)
  HttpException,  // Pour lancer des erreurs HTTP
  Logger          // Pour afficher des logs dans la console
} from '@nestjs/common';

// @Controller() ‚Üí pas de chemin sp√©cifi√© = la racine du serveur "/" 
@Controller()

// export : Rend la classe accessible depuis d'autres fichiers (n√©cessaire pour app.module.ts)
// class : D√©clare une classe TypeScript orient√©e objet
// WebhooksController : Nom de la classe (convention : PascalCase + suffixe "Controller")
export class WebhooksController {

// Logger sp√©cifique √† cette classe pour afficher des messages dans la console
// private : Cette propri√©t√© est accessible UNIQUEMENT √† l'int√©rieur de cette classe
//           Personne d'autre ne peut lire ou modifier ce logger
// readonly : Une fois initialis√©e, cette propri√©t√© ne peut plus √™tre modifi√©e
//            Protection contre les modifications accidentelles
// logger : Nom de la variable (convention : camelCase)
// = : Op√©rateur d'affectation qui initialise la variable
// new Logger(...) : Cr√©e une nouvelle instance de la classe Logger
// WebhooksController.name : R√©cup√®re le nom de la classe ("WebhooksController")
//                          Ce nom appara√Ætra dans tous les logs pour identifier la source  
  private readonly logger = new Logger(WebhooksController.name);

  // Token de v√©rification r√©cup√©r√© depuis les variables d'environnement
  // Sert √† s√©curiser le webhook et valider que les requ√™tes viennent d'une source autoris√©e
  private readonly verifyToken = process.env.VERIFY_TOKEN;

  // Endpoint GET pour la v√©rification du webhook....Ce GET est appel√© par le service externe pour confirmer que ton webhook est valide
  @Get()

  // verifyWebhook : Nom de la m√©thode (convention : camelCase, verbe √† l'infinitif)
  // ( : D√©but de la liste des param√®tres
  verifyWebhook(

    // @Query('hub.mode') : D√©corateur qui extrait le param√®tre d'URL nomm√© "hub.mode"
    //                      Si l'URL est ?hub.mode=subscribe, alors mode vaudra "subscribe"
    // mode: string : Param√®tre de type cha√Æne de caract√®res
    //                : string = annotation de type TypeScript (v√©rifi√© √† la compilation)
    @Query('hub.mode') mode: string,

    // @Query('hub.challenge') : Extrait le param√®tre "hub.challenge" de l'URL
    //                           Meta envoie un code al√©atoire qu'on doit renvoyer tel quel
    // challenge: string : Ce param√®tre contiendra le code de v√©rification de Meta
    @Query('hub.challenge') challenge: string,

    // @Query('hub.verify_token') : Extrait le param√®tre "hub.verify_token" de l'URL
    //                              C'est le token secret que Meta nous renvoie pour v√©rification
    // token: string : Ce param√®tre contiendra le token envoy√© par Meta
    //                 On va le comparer avec notre token stock√© dans verifyToken
    @Query('hub.verify_token') token: string,
  ) {

    if (mode === 'subscribe' && token === this.verifyToken) {
      this.logger.log('‚úÖ WEBHOOK VERIFIED');
      return challenge;
    } else {
      this.logger.error('‚ùå Webhook verification failed');
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  // Endpoint POST pour recevoir les √©v√©nements
  @Post()
  @HttpCode(HttpStatus.OK)
  handleWebhook(@Body() body: any) {
    const timestamp = new Date().toISOString().replace('T', ' ').slice(0, 19);
    this.logger.log(`\n\nüì© Webhook received ${timestamp}\n`);
    this.logger.log(JSON.stringify(body, null, 2));
    return;
  }
}